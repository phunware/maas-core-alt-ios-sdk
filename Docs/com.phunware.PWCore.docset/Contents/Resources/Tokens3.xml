<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PWBundleManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PWBundleManager</TokenIdentifier>
			<Abstract type="html">A generic class for download/decrypt/unzip a bundle for specific URL.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
            
			
			<NodeRef refid="3"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/PWBundleManager/sharedInstance</TokenIdentifier>
			<Abstract type="html">Shared PWBundleManager.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>+ (PWBundleManager *)sharedInstance</Declaration>
			
			
			<Anchor>//api/name/sharedInstance</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/removeBundleForURL:</TokenIdentifier>
			<Abstract type="html">Remove the bundle for a specific url.</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)removeBundleForURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The specific url for which you want to remove.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeBundleForURL:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:completion:</TokenIdentifier>
			<Abstract type="html">Fetch an unencrypted bundle from the url, unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url completion:(void ( ^ ) ( NSString *bundleDirectory , BOOL bundleChanged , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:completion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PWBundleManager/fetchBundleWithURL:decryptionKey:completion:</TokenIdentifier>
			<Abstract type="html">Fetch an encrypted bundle from the url, decprypt then unpack it, and save the necessary JSON files</Abstract>
			<DeclaredIn>PWBundleManager.h</DeclaredIn>
			
			<Declaration>- (void)fetchBundleWithURL:(NSURL *)url decryptionKey:(NSString *)decryptionKey completion:(void ( ^ ) ( NSString *bundleDirectory , BOOL bundleChanged , NSError *error ))completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The url that the manager should load.</Abstract>
				</Parameter><Parameter>
					<Name>decryptionKey</Name>
					<Abstract type="html">The key used to deprypt the bundle.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A block that returns the unzipped bundle directory or error.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/fetchBundleWithURL:decryptionKey:completion:</Anchor>
            <NodeRef refid="3"/>
		</Token>
		
        
        
	</File>
</Tokens>